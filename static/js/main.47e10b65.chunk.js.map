{"version":3,"sources":["styles/components/Login.module.css","styles/components/Form.module.css","styles/components/Header.module.css","styles/components/Table.module.css","services/index.js","actions/index.js","components/LoginComponents.js","pages/Login.js","components/Header.js","components/Table.js","components/Form.js","components/TemplateAdd.js","components/TemplateEdit.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","getCurrencies","a","fetch","response","json","saveCurrencies","currencies","type","LoginComponents","state","email","isEmailValid","isPasswordValid","redirect","handleEmail","bind","handleLogin","event","this","setState","target","value","includes","addEmail","props","to","className","Styles","mainComponent","data-testid","name","onChange","placeholder","password","e","length","button","disabled","onClick","React","Component","connect","dispatch","login","Login","Header","despesas","map","expenses","currency","Number","exchangeRates","ask","reduce","acc","cur","toFixed","header","moneyContent","handleTotal","user","wallet","Table","handleMap","remove","setEditor","key","id","description","tag","method","Math","round","table","removeExpenses","idToEdit","Form","initialState","handleInputs","handleChange","handleCurrency","handleMethods","handleTags","handlAddExpenses","getFetch","htmlFor","code","methods","tages","tags","buttonAction","console","log","buttonText","form","style","codes","Object","values","filter","TemplateAdd","addExpenses","expense","currentCurrency","expensesWithCurrency","TemplateEdit","saveExpenses","expensetoEdt","find","payload","Wallet","editor","mainContainer","editorMode","App","document","title","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","action","newExpense","rootReducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47e10b65.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainComponent\":\"Login_mainComponent__2bLYk\",\"email\":\"Login_email__1AqiD\",\"password\":\"Login_password__2yWqz\",\"button\":\"Login_button__3bVG5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__3M9DH\",\"mainContainer\":\"Form_mainContainer__2ePOm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1AeDr\",\"moneyContent\":\"Header_moneyContent__1w4Bs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table____xsr\"};","const getCurrencies = async () => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  return response.json();\n};\n\nexport default getCurrencies;\n","// Coloque aqui suas actions\nimport getCurrencies from '../services/index';\n\nexport const LOGIN = 'LOGIN';\n\nexport const login = (email) => ({ type: LOGIN, email });\n\nexport const saveCurrencies = (currencies) => ({\n  type: 'SAVE_CURRENCY',\n  currencies,\n});\n\nexport const getRequest = () => async (dispatch) => {\n  const currencies = await getCurrencies();\n  const codes = Object.values(currencies).filter((name) => name.name !== 'Dólar Turismo')\n    .map((code) => code.code);\n  dispatch(saveCurrencies(codes));\n};\n\nconst addExpenses = (expenses) => ({ type: 'ADD_EXPENSE', expenses });\n\nexport const addExpenseWithRates = (expense) => async (dispatch) => {\n  const currentCurrency = await getCurrencies();\n  const expensesWithCurrency = {\n    ...expense, exchangeRates: currentCurrency };\n  dispatch(addExpenses(expensesWithCurrency));\n};\n\nexport const removeExpenses = (id) => ({\n  type: 'REMOVE',\n  id,\n});\n\nexport const editExpense = (idToEdit) => ({\n  type: 'EDIT_EXPENSE',\n  idToEdit,\n});\n\nexport const saveExpense = (expense) => ({\n  type: 'SAVE_EDITED_EXPENSE',\n  payload: expense,\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Redirect from 'react-dom';\nimport { Link } from 'react-router-dom';\nimport { login } from '../actions/index';\nimport Styles from '../styles/components/Login.module.css'\n\nclass LoginComponents extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      isEmailValid: false,\n      isPasswordValid: false,\n      redirect: false,\n    };\n\n    this.handleEmail = this.handleEmail.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n  }\n\n  handleEmail(event) {\n    this.setState({\n      email: event.target.value,\n      isEmailValid: (!!(event.target.value.includes('@')\n        && event.target.value.includes('.com'))),\n    });\n  }\n\n  handleLogin() {\n    const { email } = this.state;\n    const { addEmail } = this.props;\n    addEmail(email);\n    this.setState({ redirect: true });\n  }\n\n  render() {\n    const { email, isPasswordValid, isEmailValid, redirect } = this.state;\n    const SIX = 6;\n    if (redirect) return <Redirect to=\"/carteira\" />;\n    return (\n      <div className={Styles.mainComponent}>\n        <input\n          className={Styles.email}\n          data-testid=\"email-input\"\n          name=\"email\"\n          type=\"email\"\n          value={ email }\n          onChange={ this.handleEmail }\n          placeholder=\"E-mail\"\n        />\n        <input\n          placeholder=\"Password\"\n          className={Styles.password}\n          data-testid=\"password-input\"\n          type=\"password\"\n          onChange={ (e) => this.setState(\n            { isPasswordValid: e.target.value.length >= SIX },\n          ) }\n        />\n        <Link to=\"/carteira\">\n          <button\n          className={Styles.button}\n            disabled={ !(isPasswordValid && isEmailValid) }\n            type=\"button\"\n            onClick={ () => {\n              this.handleLogin();\n            } }\n          >\n            Entrar\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  addEmail: (email) => dispatch(login(email)),\n});\n\nLoginComponents.propTypes = {\n  addEmail: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(LoginComponents);\n","import React from 'react';\nimport LoginComponents from '../components/LoginComponents';\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <div>\n        <LoginComponents />\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport '../App.css';\nimport PropTypes from 'prop-types';\nimport Styles from '../styles/components/Header.module.css';\n\nclass Header extends React.Component {\n  handleTotal() {\n    const { despesas } = this.props;\n    const convertedTotalValue = despesas.map((expenses) => {\n      const currency = Number(\n        expenses.exchangeRates[expenses.currency].ask,\n      );\n      return Number(expenses.value) * currency;\n    });\n\n    const totalValue = convertedTotalValue.reduce((acc, cur) => {\n      acc += cur;\n      return acc;\n    }, 0);\n    return totalValue.toFixed(2);\n  }\n\n  render() {\n    const { email } = this.props;\n    return (\n      <header className={Styles.header}>\n        <h3 data-testid=\"email-field\">{ email }</h3>\n        <div className={Styles.moneyContent}>\n          <p data-testid=\"total-field\">{`R$${this.handleTotal()}`}</p>\n          <p data-testid=\"header-currency-field\">BRL</p>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  despesas: state.wallet.expenses,\n});\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  despesas: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Header);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { editExpense, removeExpenses } from '../actions/index';\nimport Styles from '../styles/components/Table.module.css';\n\nclass Table extends React.Component {\n  constructor() {\n    super();\n\n    this.handleMap = this.handleMap.bind(this);\n  }\n\n  handleMap() {\n    const { despesas, remove, setEditor } = this.props;\n    return (\n      <tbody>\n        {despesas.map((expenses) => (\n          <tr key={ expenses.id }>\n            <td>{expenses.description}</td>\n            <td>{expenses.tag}</td>\n            <td>{expenses.method}</td>\n            <td>{expenses.value}</td>\n            <td>\n              {expenses.exchangeRates[expenses.currency].name}\n            </td>\n            <td>\n              {(Math.round(expenses.exchangeRates[expenses.currency].ask * 100) / 100)\n                .toFixed(2)}\n            </td>\n            <td>\n              {\n                (Math.round(Number(expenses.value) * Number(\n                  expenses.exchangeRates[expenses.currency].ask,\n                ) * 100) / 100).toFixed(2)\n              }\n            </td>\n            <td>Real</td>\n            <td>\n              <button\n                type=\"button\"\n                onClick={ () => setEditor(expenses.id) }\n                data-testid=\"edit-btn\"\n              >\n                Editar\n              </button>\n              <button\n                onClick={ () => remove(expenses.id) }\n                data-testid=\"delete-btn\"\n                type=\"button\"\n              >\n                Excluir\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    );\n  }\n\n  render() {\n    return (\n      <table className={ Styles.table }>\n        <thead>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        {this.handleMap()}\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  despesas: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  remove: (id) => dispatch(removeExpenses(id)),\n  setEditor: (id) => dispatch(editExpense(id)),\n});\n\nTable.propTypes = {\n  despesas: PropTypes.arrayOf(PropTypes.object).isRequired,\n  remove: PropTypes.func.isRequired,\n  setEditor: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getRequest } from '../actions/index';\nimport Styles from '../styles/components/Form.module.css';\n\nconst alimentação = 'Alimentação';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...props.initialState,\n    };\n\n    this.handleInputs = this.handleInputs.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleCurrency = this.handleCurrency.bind(this);\n    this.handleMethods = this.handleMethods.bind(this);\n    this.handleTags = this.handleTags.bind(this);\n    this.handlAddExpenses = this.handlAddExpenses.bind(this);\n  }\n\n  componentDidMount() {\n    const { getFetch } = this.props;\n    getFetch();\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n\n  handleInputs() {\n    const { value, description } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"valor\">\n          Valor despesa:\n          <input\n            onChange={ this.handleChange }\n            data-testid=\"value-input\"\n            name=\"value\"\n            type=\"number\"\n            value={ value }\n          />\n        </label>\n        <label htmlFor=\"descrição\">\n          Descrição despesa:\n          <input\n            onChange={ this.handleChange }\n            data-testid=\"description-input\"\n            name=\"description\"\n            type=\"text\"\n            value={ description }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  handleCurrency() {\n    const { currency } = this.state;\n    const { currencies } = this.props;\n    if (currencies.length > 0) {\n      return (\n        <select\n          name=\"currency\"\n          onChange={ this.handleChange }\n          value={ currency }\n          data-testid=\"currency-input\"\n        >\n          {currencies\n            .map((code) => <option data-testid={ code } key={ code }>{code}</option>)}\n        </select>\n      );\n    }\n  }\n\n  handleMethods() {\n    const payMethods = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n    const { method } = this.state;\n\n    return (\n      <select\n        onChange={ this.handleChange }\n        name=\"method\"\n        value={ method }\n        data-testid=\"method-input\"\n      >\n        {payMethods\n          .map((methods) => (\n            <option\n              key={ methods }\n            >\n              {methods}\n            </option>))}\n      </select>\n    );\n  }\n\n  handleTags() {\n    const tages = [alimentação, 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    const { tag } = this.state;\n\n    return (\n      <select\n        name=\"tag\"\n        onChange={ this.handleChange }\n        value={ tag }\n        data-testid=\"tag-input\"\n      >\n        {tages\n          .map((tags) => (\n            <option\n              key={ tags }\n            >\n              {tags}\n            </option>))}\n      </select>\n    );\n  }\n\n  handlAddExpenses() {\n    const { buttonAction, initialState } = this.props;\n    console.log(buttonAction);\n    buttonAction(this.state);\n    this.setState({\n      ...initialState,\n    });\n  }\n\n  render() {\n    const { buttonText } = this.props;\n    return (\n      <div \n        className={ Styles.form }\n        style={buttonText === \"Adicionar despesa\" ? {\"background-color\": \"#32B8F0\"} : {\"background-color\": \"#00CC00\"}}\n      >\n        {this.handleInputs()}\n        {this.handleCurrency()}\n        {this.handleMethods()}\n        {this.handleTags()}\n        <button\n          type=\"button\"\n          onClick={ this.handlAddExpenses }\n        >\n          {buttonText}\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getFetch: () => dispatch(getRequest()),\n});\n\nForm.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  getFetch: PropTypes.func.isRequired,\n  buttonText: PropTypes.string.isRequired,\n  initialState: PropTypes.shape({\n    value: PropTypes.string,\n    description: PropTypes.string,\n    currency: PropTypes.string,\n    method: PropTypes.string,\n    tag: PropTypes.string,\n  }).isRequired,\n  buttonAction: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addExpenseWithRates } from '../actions';\n\nimport Form from './Form';\n\nclass TemplateAdd extends React.Component {\n  render() {\n    const initialState = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'alimentação',\n    };\n    const { addExpenses } = this.props;\n    return (\n      <Form\n        buttonText=\"Adicionar despesa\"\n        initialState={ initialState }\n        buttonAction={ addExpenses }\n      />\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  addExpenses: (expenses) => dispatch((addExpenseWithRates(expenses))),\n});\n\nTemplateAdd.propTypes = {\n  addExpenses: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(TemplateAdd);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport Form from './Form';\nimport { saveExpense } from '../actions';\n\nclass TemplateEdit extends React.Component {\n  render() {\n    const { expenses, idToEdit, saveExpenses } = this.props;\n    const expensetoEdt = { ...expenses.find((expense) => expense.id === idToEdit) };\n    delete expensetoEdt.exchangeRates;\n    return (\n      <Form\n        initialState={ expensetoEdt }\n        buttonText=\"Editar despesa\"\n        buttonAction={ saveExpenses }\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n  idToEdit: state.wallet.idToEdit,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveExpenses: (state) => dispatch(saveExpense(state)),\n});\n\nTemplateEdit.propTypes = {\n  idToEdit: PropTypes.number.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  saveExpenses: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TemplateEdit);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Table from '../components/Table';\nimport Styles from '../styles/components/Form.module.css';\n\nimport TemplateAdd from '../components/TemplateAdd';\nimport TemplateEdit from '../components/TemplateEdit';\n\nclass Wallet extends React.Component {\n  render() {\n    const { editor } = this.props;\n    return (\n      <div className={Styles.mainContainer}>\n        <Header />\n        {editor ? <TemplateEdit /> : <TemplateAdd />}\n        <Table />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  editor: state.wallet.editorMode,\n});\n\nWallet.propTypes = {\n  editor: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends React.Component {\n\n  componentDidMount() {\n    document.title = \"My Expenses\"\n  }\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { LOGIN } from '../actions/index';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nexport default function user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case LOGIN:\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n}\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  id: 0,\n  editorMode: false,\n  idToEdit: null,\n};\n\nconst one = 1;\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  const newExpense = {\n    id: state.id,\n    ...action.expenses,\n  };\n  switch (action.type) {\n  case 'SAVE_CURRENCY': return { ...state, currencies: action.currencies };\n  case 'ADD_EXPENSE':\n    return {\n      ...state,\n      expenses: [...state.expenses, newExpense],\n      id: state.id + one,\n    };\n  case 'REMOVE':\n    return {\n      ...state,\n      expenses: state.expenses.filter((expense) => expense.id !== action.id),\n    };\n  case 'EDIT_EXPENSE':\n    return {\n      ...state,\n      editorMode: true,\n      idToEdit: action.idToEdit,\n    };\n  case 'SAVE_EDITED_EXPENSE':\n    return {\n      ...state,\n      editorMode: false,\n      idToEdit: null,\n      expenses: state.expenses.map((expense) => {\n        if (expense.id === state.idToEdit) {\n          return {\n            ...expense,\n            ...action.payload,\n          };\n        }\n        return expense;\n      }),\n    };\n  default: return state;\n  }\n};\n\nexport default wallet;\n","// import user from './user';\n// import wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducers = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducers;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducers from '../reducers/index';\n\nconst store = createStore(\n  rootReducers,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/index';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}